#!/usr/bin/env node

/**
 * Copyright (c) 2024 Hugo W.L. ter Doest, Ugo Software
 *
 * This software is distributed under the European Union Public Licence (EUPL) v1.2.
 * See: https://joinup.ec.europa.eu/collection/eupl/eupl-text-eupl-12
 */

import extract from '../src/extract.js'
import train from '../src/train.js'
import test from '../src/test.js'
import config from '../src/Config.js'

const commands = {
  extract: extract,
  train: train,
  test: test,
  iterate: iterate
}

const usage = () => {
  console.log('Usage: node index.js <command> [<command> ...]')
  console.log('Commands:')
  console.log('  extract  Extract training patterns')
  console.log('  train    Train the model')
  console.log('  test     Test the model')
  console.log('  iterate  Iterate through a list of values specified in Config.js')

  console.log('Environment variables for files and directoris:')
  console.log('  MODEL_FILE: Path to the model file')
  console.log('  CORPUS_TRAIN: Path to the training corpus')
  console.log('  CORPUS_TEST: Path to the test corpus')
  console.log('  FORM_FILE: Path to the form vocabulary file')
  console.log('  LEMMA_FILE: Path to the lemma vocabulary file')
  console.log('  UPOSTAG_FILE: Path to the upostag vocabulary file')
  console.log('  PATTERNS_FILE: Path to the pattern file')
  console.log('  MODEL_DIR: Path to the model directory')
  console.log('  MODEL_FILE: Path to the model directory')
  console.log('  TEST_RESULTS_FILE: Path to the test results')
  console.log('  TRAIN_RESULTS_FILE: Path to the model directory\n')

  console.log('TensorFlow variables:')
  console.log('  TENSORFLOW_INPUTLAYER_UNITS: number of units for the input layer')
  console.log('  TENSORFLOW_INPUTLAYER_ACTIVATION: activation function for the input layer')
  console.log('  TENSORFLOW_HIDDEN_LAYER_UNITS: number of units for the hidden layer')
  console.log('  TENSORFLOW_HIDDEN_LAYER_ACTIVATION: activation function for the hidden layer')
  console.log('  TENSORFLOW_OUTPUT_LAYER_UNITS: number of units for the output layer')
  console.log('  TENSORFLOW_OUTPUT_LAYER_ACTIVATION: activation function for the output layer')
  console.log('  TENSORFLOW_OPTIMIZER: optimizer for the model')
  console.log('  TENSORFLOW_LOSS: loss function for the model')
  console.log('  TENSORFLOW_METRICS: metrics for the model')
  console.log('  TENSORFLOW_BATCH_SIZE: batch size for training')
  console.log('  TENSORFLOW_EPOCHS: number of epochs for training')
}

// Allows to specify a configuration item and a list of possible values
// - path is an array of keys to the config item
// - values is an array of possible values
async function iterate () {
  async function setIteration(config, cmd, path, value) {
    return new Promise((resolve, reject) => {
      config.iterate.currentIteration = {
        command: cmd,
        key: path,
        value: value
      }
      let current = config;
      for (let i = 0; i < path.length - 1; i++) {
        const key = path[i]
        if (current[key]) {
          current = current[key]
        } else {
          throw new Error(`Key '${key}' does not exist in the object`);
        }
      }
      current[path[path.length - 1]] = value;
      resolve()
    })
  }

  const cmds = config.iterate.commands
  const path = config.iterate.configItem
  const values = config.iterate.values
  
  async function iterate(values, cmds, path) {
    for (let i = 0; i < values.length; i++) {
      const value = values[i];
      for (const cmd of cmds) {
        if (commands[cmd]) {
          await setIteration(config, cmd, path, value);
          await commands[cmd]();
        } else {
          throw new Error(`Unknown command: ${cmd}`);
        }
      }
      // Wait for the entire iteration to complete before moving on to the next one
      await new Promise(resolve => resolve());
    }
  }
  
  iterate(values, cmds, path);
}

const args = process.argv.slice(2)

if (args.length === 0) {
  usage()
  process.exit(1)
}

args.forEach((arg) => {
  if (!commands[arg]) {
    console.error(`Unknown command: ${arg}`)
    usage()
    process.exit(1)
  }
})

args.forEach((arg) => {
  const cmd = commands[arg]
  cmd()
})